#!/usr/bin/env bash

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.

function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


function sudo_using_touchid() {
	sudo sed -i.bak 's/^auth.*sufficient.*\.so/auth       sufficient     pam_tid.so/' /etc/pam.d/sudo;
}


function sudo_using_default() {
	sudo sed -i.bak 's/^auth.*sufficient.*\.so/auth       sufficient     pam_smartcard.so/' /etc/pam.d/sudo;
}


function brew_service_pluck() {
    case $# in
        1 )
            sudo brew services info --json $1 | jq -e -r .[]
            ;;
        2 )
            sudo brew services info --json $1 | jq -e -r .[].$2
            ;;
        * )
            ;;
    esac
}


function plist_pluck() {
    # e.g. show the path for php 7.0 brew service
    # plist_pluck $(brew_service_pluck php@7.0 file) ProgramArguments | jq .[0]

    [ $# -lt 1 ] && { echo "usage:$0 plist_file [key]" > /dev/stderr ; return 1; }
    case $# in
        1 )
            plutil -convert json -o - $1 | jq .
            ;;
        2 )
            plutil -convert json -o - $1 | jq -e -r .$2
            ;;
        * )
            ;;
    esac
}


function dockspace {
	# default - add space tile to dock
	defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
	killall Dock
}


function gen_random() {
	# Allow "tr" to process non-utf8 byte sequences, read random bytes and keep only alphanumerics
	length=${1:-32}
	LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c$length
}


function scriptdir() {
	# get the folder the 'current' script (as called from) is working under, https://stackoverflow.com/questions/59895
	echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
}


function kill_port () {
    [ $# -eq 1 ] && kill $(lsof -t -i4TCP:$1) && echo 'done'
}


function postgres_dev_init() {
    # after fresh install of postgres - setup basics
    if test ! -z "$PGUSER"; then
        createuser -s ${$PGUSER}
    fi
}


function what_port() {

	# macOs - what app is running on a port

	if [ $# -ne 1 ]; then
		echo "need to know the port";
		return 1;
	fi
	echo "looking for '$1'"
	lsof -nP -iTCP -sTCP:LISTEN | grep "${1}"
	# ps -Ao user,pid,command | grep -v grep | grep $(netstat -anv | grep "$searchport " | awk '{print $9}')
}


function op() {
	#
	# Function to open specified project in projects folder
	#

	# To override use env WORKSPACE, e.g. export WORKSPACE=~/Code
	rootfolder="${WORKSPACE:-$HOME/Documents}"

	echo "ENV(WORKSPACE:${WORKSPACE})"


	found=0 # 0 = Not Found; 1 = Found
	project="$1" # Name of project given
	repo="$2" # Name of repository given
	count=0 # Array counter

	# Following is in order of preference
	if [[ $repo != "" ]]; then # Change to project repo
		directories[$count]=${rootfolder}/${project}/${repo}; ((count++));
		directories[$count]=${rootfolder}/${project}*/${repo}*; ((count++));
		directories[$count]=${rootfolder}/${project}*/bgdevlab-${repo}; ((count++));
	fi

	# Usually webapp is the common repo if no repo was specified
	directories[$count]=${rootfolder}/${project}/webapp; ((count++));
	directories[$count]=${rootfolder}/${project}/${project}; ((count++));
	directories[$count]=${rootfolder}/${project}/scratch; ((count++));
	directories[$count]=${rootfolder}/${project}; ((count++));
	directories[$count]=${rootfolder}/${project}*; ((count++));

	# Look for possible project folders and change into it if one found.
	for dir in ${directories[@]}; do
		if [[ -d $dir ]]; then
			found=1
			pushd $dir
			echo -e "Changed directory to: $(echo_color green)'$dir'${echo_normal}"
			break
		fi
	done

	# Was folder changed?
	if [[ $found == 0 ]]; then
		echo -e "$(echo_color red)Project directory not found.${echo_normal}"
	fi
}


function man() {
    # colour for man pages
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

function sshrem() {
	# TODO : look at ssh-keyscan -H for another option
	if [ $# -lt 1 ]; then
		echo -e "missing argument: host[s]"
		return 1;
	fi
	for s in $@
	do
	echo -e "\n>> removing '$s'";
	for khfile in $(find ~/.ssh -regex '.*known_hosts[0-9]*$')
		do
			target_server="${s}"
			target_server_ip=$(dig +search +short ${target_server})
			target_server_shortname=$(echo ${target_server} | cut -d. -f1)
			echo "Scanning : ${khfile} for '${target_server}', '${target_server_ip}', '${target_server_shortname}'"
			ssh-keygen -R ${target_server} -f ${khfile} &>/dev/null && echo "success removed $target_server" || echo "problem removing $target_server"
			ssh-keygen -R ${target_server_ip} -f ${khfile} &>/dev/null && echo "success removed $target_server_ip" || echo "problem removing $target_server_ip"
			ssh-keygen -R ${target_server_shortname} -f ${khfile} &>/dev/null && echo "success removed $target_server_shortname" || echo "problem removing $target_server_shortname"
		done
	done
}


function ssh_prepare_keyexchange() {
	# allow easy remote access - authorize key for current user
	if [ $# -lt 1 ]; then
		echo "args: host [user]"
		return 1;
	fi

	target_site=$1
	user="${2:-root}"

	for khfile in $(find ~/.ssh -regex '.*known_hosts[0-9]*$')
	do
		ssh-keyscan -H ${target_site} >> ${khfile}
	done
	ssh-copy-id ${user}@${target_site}

}

# ===========================================================================
#   Java

function show_manifest() {
	# show contents of JAR manifest
	if [ $# -eq 1 ] && [ -f $1 ]; then
		unzip -q -c "$1" "META-INF/MANIFEST.MF" | sort
	else
		echo "Purpose: view JAR files MANIFEST.MF"
		echo "Usage: $0 jarfilename"
	fi
}


# ===========================================================================
#   JS Node NPM

function js_env_install() {

	type -p nvm || echo "Cannot find NVM - try 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash'"

	# notify only as dotbot and Brewfile manage node and yarn install.
    type -p node &>/dev/null || echo "brew install node - see .Brewfile"
    type -p yarn &>/dev/null || echo "brew install yarn - see .Brewfile"

    if type -p nvm; then
		nvm use stable || nvm install stable
		nvm use stable && npm install twilio-cli -g
	fi
	# add

}


# ===========================================================================
#   PHP Laravel Valet Composer


function clearall() {
    [ ! -e ./artisan ] && echo "no artisan" && return
    artisan cache:clear
    artisan config:clear
    artisan route:clear
    [ "$1" == 'oc' ] && artisan opcache:clear || echo -e "Skipping: artisan opcache:clear ( use argument 'oc' ) "
    artisan optimize
}

# TODO - move to autocomplete section
# autocomplete - PHP - Deployer - add auto-complete for 'prov' alias, an alias to 'dep' (see deployer/deployer )
type -t _deployer ^ >/dev/null && complete -o default -F _deployer prov

# autocomplete - Laravel - Artisan - https://gist.github.com/jhoff/8fbe4116d74931751ecc9e8203dfb7c4
_artisan() {
    COMP_WORDBREAKS=${COMP_WORDBREAKS//:/}
    COMMANDS=$(php artisan --raw --no-ansi list | sed "s/[[:space:]].*//g")
    COMPREPLY=($(compgen -W "$COMMANDS" -- "${COMP_WORDS[COMP_CWORD]}"))
    return 0
}
complete -F _artisan art
complete -F _artisan artisan


# TODO - move to autocomplete section
# provision autocomplete
_prov() {
    COMP_WORDBREAKS=${COMP_WORDBREAKS//:/}
    COMMANDS=$(dep -f=prov.php --raw --no-ansi list | sed "s/[[:space:]].*//g")
    COMPREPLY=($(compgen -W "$COMMANDS" -- "${COMP_WORDS[COMP_CWORD]}"))
    return 0
}
complete -F _prov prov


function imagick_test() {

    if [ $# -ne 1 ]; then
        echo "usage: ${FUNCNAME[0]} filename"
        return 1
    fi

    [ type -p php &>/dev/null ] || {
        echo "cannot find php"
        return 1
    }

    outputfile=$1
    php <<"IMAGICK_TEST" >$outputfile
<?php
$im = new Imagick();
$im->newPseudoImage(650, 250, "gradient:red-black");
$im->setImageFormat('png');
header("Content-Type: image/png");
echo $im;
IMAGICK_TEST
    file $outputfile | grep 'PNG image data'
    return $?
}


function valet_config_backup() {
    # backup any existing composer global definitions.
    backup_config="$HOME/backup_composer_and_valet_config.$(date +%Y%m%d_%H%M_%s).tar.gz"
    tar -czf $backup_config $(composer global config --absolute home 2>/dev/null)/config.json $HOME/.valet $HOME/.config/valet &>/dev/null

    if test -e "$backup_config"; then
        echo "👍 backup of composer and valet configuration completed - see $backup_config"
    else
        echo "👎 backup of composer and valet configuration ($backup_config) FAILED"
    fi
}


# ===========================================================================
#   Brew Apps

# https://www.jetbrains.com/help/phpstorm/10.0/working-with-phpstorm-features-from-command-line.html
# see 'Install Command Link Launcher from within the app itself.' /usr/local/bin/pstorm

function launchSmartGit() {

	dir="${1:-$(pwd)}"

	if [ ! -d ${dir} ]; then
		echo -e "$(echo_color red)'${dir}' is not a valid directory.${echo_normal}"
		return 1
	fi

	pushd "$dir" 1>/dev/null

	if [ git rev-parse --is-inside-work-tree &>/dev/null ]; then
		local app="/Applications/SmartGit.app/Contents/MacOS/SmartGit"
		nohup "${app}" --log "${1}" &>/dev/null &
	else
		echo -e "$(echo_color red)'${dir}' is not a GIT directory.${echo_normal}"
	fi

	popd 1>/dev/null

}


function git_add_to_osxkeychain() {
	# https://opensource.apple.com/source/Git/Git-33/src/git/contrib/credential/osxkeychain/git-credential-osxkeychain.c.auto.html
	[ $# -ne 3 ] && {
		echo 'Usage: host username password'
		return 1
	}
	printf "protocol=https\nhost=%s\nusername=%s\npassword=%s\n" "$1" "$2" "$3" | git "credential-osxkeychain" store
}

function git_tag_relases() {
    git for-each-ref --sort=-creatordate --format '## %(refname)

**Released:**  %(creatordate) %(object:short) - %(*objectname:short)

   -  %(*subject)

' refs/tags | sed -e 's-refs/tags/--'

}


# ===========================================================================
#   Vagrant / VMWare macOs VMWare Fusion helper functions

function vagrant_findvm() {

	local __resultvar=${1:-vmid}
	local path=${2:-.}

	# try sub folder for VMs
	echo "searching subfolders for .vagrant"
	local options=()
	local optionsid=()

	for vf in $(find $path -type f -path "*/.vagrant/machines/default/*/index_uuid"); do
		optionid=$(printf "%b " "$(cat $vf)");
		option=$(printf "%b________%b\n" "$(cat $vf)" $vf);
		optionsid+=($optionid)
		options+=($option)
	done

	PS3='Which VM: '
	if (( ${#options[@]} )); then

		select opt in "${options[@]}"
		do
			case $opt in
				*) break
				;;
			esac
		done

		lvmid=${optionsid[$((REPLY-1))]}
		if [[ "$__resultvar" ]]; then
			eval $__resultvar="'$lvmid'"
		fi
	fi

}


function vagrant_ssh() {

	# Vagrant SSH
	if [ $# -eq 0 ]; then
		vagrant ssh 2>/dev/null && return || echo 'no VM found in current folder';
	fi;

	# try arg as VM ID
	if [ $# -eq 1 ]; then
		vagrant ssh $1 2>/dev/null && return || echo "no VM found with argument specified"
	fi

	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying ssh for $vmid"
		vagrant ssh $vmid
		echo "finished ssh for $vmid"
	else
		echo "no VMs found in subfolder"
	fi

}


function vagrant_reload() {

	# Vagrant Reload
	if [ $# -eq 0 ]; then
		vagrant reload 2>/dev/null && return || echo 'no VM found in current folder';
	fi;

	# try arg as VM ID
	if [ $# -eq 1 ]; then
		vagrant reload $1 2>/dev/null && return || echo "no VM found with argument specified"
	fi

	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying reload for $vmid"
		vagrant reload $vmid
		echo "finished reload for $vmid"
	else
		echo "no VMs found in subfolder"
	fi
}


function vagrant_kill() {

	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying destroy for $vmid"
		vagrant destroy -f $vmid
		echo "finished destroy for $vmid"
	else
		echo "no VMs found in subfolder"
	fi

}


function vagrant_stat() {
	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying status for $vmid"
		vagrant status $vmid
		echo "finished status for $vmid"
	else
		echo "no VMs found in subfolder"
	fi
}


function launchVM() {
	# wip
	[ $# -ne 1 ] && echo "Specify a path to an OVA file to use."
	SRC_OVF=$1

	vm_name=${1:-$(date +%F-%H%M%S)}
	vm_path=${2:-vms}/$vm_name

	mkdir -p $vm_path && ovftool $SRC_OVF $vm_path/${vm_name}.vmx && vmrun -T fusion start $vm_path/${vm_name}.vmx
	# vmrun -T fusion addNetworkAdapter ${vm_name}.vmx bridged && vmrun -T fusion start ${vm_name}.vmx
}

function clear_dns_cache() {
	[ "$(uname)" == 'Darwin' ] && {
        sudo dscacheutil -flushcache
        sudo killall -HUP mDNSResponder
        echo "cleared"
    }
}

# postgres occationally refuses connections. This resolves it
function fixpsql() {
	brew services stop postgresql@9.5;
	rm -f /usr/local/var/postgresql\@9.5/postmaster.pid;
	brew services start postgresql@9.5;
}

# Use correct node version
enter_directory() {
	if [[ $PWD == $PREV_PWD ]]; then
		return
	fi

	PREV_PWD=$PWD
	[[ -f ".nvmrc" ]] && nvm use
}
